from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                           InlineKeyboardButton, InlineKeyboardMarkup)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from game_classes import Game, City, Planet
import json
import pymorphy3

morph = pymorphy3.MorphAnalyzer()

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ

def start_keyboard(isadmin: bool):
    if isadmin:
        return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É')], 
                                             [KeyboardButton(text='–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É')]])
    else:
        return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É')]])

def choose_lobby_keyboard(games : list[Game]):
    builder = InlineKeyboardBuilder()
    for game in games:
        builder.add(InlineKeyboardButton(text=str(game.id), callback_data=str(game.id)))
    return builder.adjust(4).as_markup()

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤

def city_keyboard(nround: int, planet : Planet, cities: list[City], under_shield: list[City], developed: list[City]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if nround == 1:
        for city in cities:
            str1 = '‚úÖ' if city in developed else ''
            builder.add(InlineKeyboardButton(text=f'{str1}üìà {city.name()} (150 üíµ)', 
                                            callback_data=f'develop {planet.id} {city.id}'))
    else:
        for city in cities:
            str1, str2 = '', ''
            if city in developed:
                str1 = '‚úÖ'
            if city in under_shield:
                str2 = '‚úÖ'
            builder.add(InlineKeyboardButton(text=f'{str1}üìà {city.name()} (150 üíµ)', callback_data=f'develop {planet.id} {city.id}'), 
                        InlineKeyboardButton(text=f'{str2}üõ°Ô∏è {city.name()} (300 üíµ)', callback_data=f'defend {planet.id} {city.id}'))
    return builder.adjust(2).as_markup()

def sanctions_keyboard(planet : Planet, planets: list[Planet], under_sanctions: list[Planet]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    planets.remove(planet)
    for other_planet in planets:
        addition = '‚úÖ ' if other_planet in under_sanctions else ''
        other_name = morph.parse(other_planet.name())[0]
        other_name = other_name.inflect({'accs'}).word.capitalize()
        builder.add(InlineKeyboardButton(text=f'{addition}–ù–∞–ª–æ–∂–∏—Ç—å —Å–∞–Ω–∫—Ü–∏–∏ –Ω–∞ {other_name}', 
                                         callback_data=f'sanctions {planet.id} {other_planet.id}'))
    return builder.adjust(2).as_markup()

def invent_meteorites_keyboard(planet : Planet, chosen: bool) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=('‚úÖ ' if chosen else '') + '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å (500 üíµ)', 
                                                      callback_data=f'invent {planet.id}')]])

def meteorites_keyboard(planet: Planet, chosen: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for i in range(1, 4):
        if chosen == i:
            builder.add(InlineKeyboardButton(text=f'‚úÖ –ö—É–ø–∏—Ç—å {i} ({150*i} üíµ)', 
                                             callback_data=f'create {planet.id} {i}'))
        else:
            builder.add(InlineKeyboardButton(text=f'–ö—É–ø–∏—Ç—å {i} ({150*i} üíµ)', 
                                             callback_data=f'create {planet.id} {i}'))
    return builder.adjust(3).as_markup()

def eco_keyboard(planet: Planet, chosen: bool) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ç–µ–æ—Ä–∏—Ç –≤ –∞–Ω–æ–º–∞–ª–∏—é' if chosen else '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ç–µ–æ—Ä–∏—Ç –≤ –∞–Ω–æ–º–∞–ª–∏—é', 
                                callback_data=f'eco {planet.id}')]])

def other_planets_keyboard(nround: int, planet: Planet, other_planet: Planet, chosen_cities: list[City]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if nround > 1:
        for city in other_planet.cities():
            add = '‚úÖ ' if city in chosen_cities else ''
            cityname = morph.parse(city.name())[0]
            cityname = cityname.inflect({'accs'}).word.capitalize()
            builder.add(InlineKeyboardButton(text=f'{add}–ê—Ç–∞–∫–æ–≤–∞—Ç—å {cityname}', 
                                            callback_data=f'attack {planet.id} {city.id}'))
    builder.add(InlineKeyboardButton(text='–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã üìû', 
                                     callback_data=f'negotiations {planet.id} {other_planet.id}'),
                InlineKeyboardButton(text='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω–µ–≥ üí∏', 
                                     callback_data=f'transaction {planet.id} {other_planet.id}'))
    return builder.adjust(2).as_markup()

def negotiations_offer_keyboard(planet : Planet, from_planet: Planet):
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'accept {planet.id} {from_planet.id}'), 
                                                  InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'deny {planet.id} {from_planet.id}')]])

end_negotiations_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã',
                                           callback_data='end_negotiations')]])


#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–∞–Ω–µ—Ç –≤ –∏–≥—Ä–µ
def number_of_planets_keyboard(pack: str):
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=str(i), callback_data=f'{i},{pack}') for i in range(2, 6)],
                                                 [InlineKeyboardButton(text=str(i), callback_data=f'{i},{pack}') for i in range(6, 10)]])

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞ –≤ –∏–≥—Ä–µ
def ingame_keyboard(isadmin: bool):
    if isadmin:
        return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')],
                                             [KeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã')]])
    else:
        return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã')]])

conversations_admin_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥')]])

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–æ–≤
def pack_keyboard():
    file = open('./presets/planets_and_cities.json', encoding='utf-8')
    d = json.load(file)
    builder = InlineKeyboardBuilder()
    for key in d.keys():
        builder.add(InlineKeyboardButton(text=key, callback_data=key))
    return builder.adjust(2).as_markup()