import logging
from aiogram import Dispatcher, executor, Bot, types
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from keyboards import *
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from random import shuffle
import asyncio, pymorphy3, os
from zipfile import ZipFile

class BotStates(StatesGroup):
    planets_numbers = State()
    entering_game = State()
    choosing_city_to_develop = State()
    
    

BOT_TOKEN = '6300949258:AAH58zEGG1WSAwjrRdUEVVM21LgsVlVmcKg'
morph = pymorphy3.MorphAnalyzer()
logging.basicConfig(level=logging.INFO)

Messages = {
    'start' : '–ü—Ä–∏–≤–µ—Ç üëã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login <–ª–æ–≥–∏–Ω>',
    'login' : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0}!',
    'already_logged' : '–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /exit, –∑–∞—Ç–µ–º –≤–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /login.',
    'login_failure' : '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /login <–ª–æ–≥–∏–Ω>',
    'login_online' : '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ—Ç–∏. –í–æ–π–¥–∏—Ç–µ –ø–æ–¥ –¥—Ä—É–≥–∏–º –ª–æ–≥–∏–Ω–æ–º.',
    'entering_game_admin' : '–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {0}. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã, –∞ —Ç–∞–∫–∂–µ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π',
    'entering_game_user' : '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–ª–∞–Ω–µ—Ç—ã {0} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ –Ω–∞–º! –í –∏–≥—Ä–µ: {1}/{2}.',
    'starting_game_not_being_in' : '–í—ã –Ω–µ –Ω–µ—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –∫–∞–∫–æ–π –≤ –∏–≥—Ä–µ. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É!',
    'not_enough_players' : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ ({0}/{1} üë§ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å). –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –≤–æ–π–¥—É—Ç –≤—Å–µ, –∞ –∑–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É',
    'on_user_joined' : '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–ª–∞–Ω–µ—Ç—ã {0} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ ({1}/{2} üë§)',
    'on_user_left' : '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–ª–∞–Ω–µ—Ç—ã {0} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã ({1}/{2} üë§)',
    'signout' : '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login',
    '5 minutes left' : '–í–Ω–∏–º–∞–Ω–∏–µ, –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç ‚è≥. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–∫–∞–∑—ã.',
    '1 minute left' : '–í–Ω–∏–º–∞–Ω–∏–µ, –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ –æ—Å—Ç–∞–ª–∞—Å—å 1 –º–∏–Ω—É—Ç–∞ ‚åõ. –ï—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–∏ –ø—Ä–∏–∫–∞–∑—ã, —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –∏–Ω–∞—á–µ –ø—Ä–∏–∫–∞–∑—ã –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –ø—É—Å—Ç—ã–º–∏.',
    'first_round' : """*–ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è*
–í —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –æ–±—Å—É–¥–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –∏–≥—Ä—É\\. 
–¢–∞–∫–∂–µ –≤—ã —É–∂–µ –º–æ–∂–µ—Ç–µ –≤–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç–µ–æ—Ä–∏—Ç–æ–≤ \\(–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ‚òÑÔ∏è\\) –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏ –∞–Ω–æ–º–∞–ª–∏–∏ –∏–ª–∏ —á—É–∂–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –ª–∏–±–æ –∂–µ –≤–ª–æ–∂–∏—Ç—å –∏—Ö –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ \\(–†–∞–∑–≤–∏—Ç–∏–µ üìà\\)\\.""",
    'city_info': """*{0}*
*–î–æ—Å—Ç—É–ø–Ω—ã–π –±—é–¥–∂–µ—Ç:* _{1}_ üíµ
*–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ:* _{2}%_
*–ì–æ—Ä–æ–¥–∞:*
_{3}_\t\\(–†–∞–∑–≤–∏—Ç–∏–µ: _{4} %_; –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏: _{5} %_; –î–æ—Ö–æ–¥: _{6}_ üíµ\\)
_{7}_\t\\(–†–∞–∑–≤–∏—Ç–∏–µ: _{8} %_; –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏: _{9} %_; –î–æ—Ö–æ–¥: _{10}_ üíµ\\)
_{11}_\t\\(–†–∞–∑–≤–∏—Ç–∏–µ: _{12} %_; –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏: _{13} %_; –î–æ—Ö–æ–¥: _{14}_ üíµ\\)
_{15}_\t\\(–†–∞–∑–≤–∏—Ç–∏–µ: _{16} %_; –£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏: _{17} %_; –î–æ—Ö–æ–¥: _{18}_ üíµ\\)""",
    'sanctions_info' : "*–°–∞–Ω–∫—Ü–∏–∏:*\n_{0}_",
    'eco_info' : '*–í–µ–Ω–µ—Ä–∏–∞–Ω—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è*\n–£—Ä–æ–≤–µ–Ω—å –∞–Ω–æ–º–∞–ª–∏–∏: _{0} %_',
    'other_planet' : """"*{0}*
{1}\t\\(–†–∞–∑–≤–∏—Ç–∏–µ: _{2} %_\\)
{3}\t\\(–†–∞–∑–≤–∏—Ç–∏–µ: _{4} %_\\)
{5}\t\\(–†–∞–∑–≤–∏—Ç–∏–µ: _{6} %_\\)
{7}\t\\(–†–∞–∑–≤–∏—Ç–∏–µ: _{8} %_\\)""",
    'no_enough_money' : '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –û—Ç–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.',
    'round_results' : '{0} —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω!\n–í —Å–ª–µ–¥—É—é—â–µ–º –∞—Ä—Ö–∏–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –∞—Ä—Ö–∏–≤–µ html-—Ñ–∞–π–ª.',
    'end_of_round' : '_*{0} —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω\\!*_\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –º–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞ –∏ –æ–±—Å—É–¥–∏—Ç—å –∏—Ö\\.'
}

common_users = dict()   #–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
users_online = dict()   #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω (–∫–ª—é—á - –ª–æ–≥–∏–Ω, –∑–Ω–∞—á–µ–Ω–∏–µ - id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
admins = []             #—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
admin_ids = set()       #–∞–π–¥–∏—à–Ω–∏–∫–∏ –∞–¥–º–∏–Ω–æ–≤
available_logins = []   #–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–æ–≥–∏–Ω—ã
games = []              #—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤, –∫–∞–∂–¥—ã–π —Å–ø–∏—Å–æ–∫: [–∏–≥—Ä–∞, —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–≥—Ä—ã (–∏—Ö –∞–π–¥–∏—à–Ω–∏–∫–æ–≤), —Å–ª–æ–≤–∞—Ä—å: –ø–ª–∞–Ω–µ—Ç–∞ -> —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –±–æ—Ç–∞]

with open('admins.txt', 'r') as file:
    admins = [line.strip() for line in file]
with open('logins.txt', 'r') as file:
    available_logins = [line.strip() for line in file]
shuffle(available_logins)
    
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

############################################ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ##################################################

def html_page_generator(gameid: int, game: Game):
    os.chdir("round results")
    file = open(f'results_{gameid}{game.show_round()}.html', 'w', encoding='UTF-8')
    with open('presets\\head.txt', encoding='UTF-8') as head:
        file.write(''.join(head.readlines()).format(gameid))
    i = 1
    for planet in game.planets().values():
        cities = planet.cities()
        names_of_cities = [c.name() for c in cities]
        percentages = [c.rate_of_life(game.eco_rate) for c in cities]
        s = None
        with open('presets\\planet panel.txt', encoding='UTF-8') as panel:
            s = ''.join(panel.readlines())
            args = [planet.name(), i]
            for j in range(len(names_of_cities)):
                args.extend(
                    ['', names_of_cities[j]] if percentages[j] != 0 else ['dead-', f'<s>{names_of_cities[j]}</s>'])
            for j in range(len(names_of_cities)):
                args.extend(['dead-' if percentages[j] == 0 else '', percentages[j]])
            s = s.format(*args)
            file.write(s)
        i += 1
    with open('presets\\chart begin preset.txt', encoding='UTF-8') as chart:
        file.write(''.join(chart.readlines()))
    rates_of_life = [planet.rate_of_life() for planet in game.planets().values()]
    max_rate = max(rates_of_life)
    planets = list(game.planets().keys())
    bar_preset = None
    with open('presets\\bar preset.txt', encoding='UTF-8') as bar:
        bar_preset = ''.join(bar.readlines())
    for j in range(len(planets)):
        file.write(bar_preset.format(rates_of_life[j] / 100 * max_rate, rates_of_life[j], planets[j]))
    with open('presets\\ending preset.txt', encoding='UTF-8') as end:
        file.write(''.join(end.readlines()).format(100 - game.eco_rate))
    file.close()
    os.chdir("..")

def css_generator(gameid: int, n: int):
    colors = ('green', 'red', 'blue', 'orange', 'purple', 'yellowgreen', 'darkred', 'darkblue')
    os.chdir("round results")
    file = open(f'style{gameid}.css', 'w', encoding='UTF-8')
    preset = open(f'presets\\style.css', 'r', encoding='UTF-8')
    file.write(''.join(preset.readlines()))
    preset.close()
    file.write('.panel-1')
    for i in range(2, n + 1):
        file.write(f', .panel-{i}')
    with open('presets\\panel settings.txt') as sets:
        file.write(''.join(sets.readlines()))
    file.write('.upper-half-1')
    for i in range(2, n + 1):
        file.write(f', .upper-half-{i}')
    with open('presets\\upper-half settings.txt') as sets:
        file.write(''.join(sets.readlines()))
    for i in range(n):
        file.write(f""".upper-half-{i + 1} {{
    background-color: {colors[i]};
}}\n\n""")
    file.close()
    os.chdir("..")
        

async def timer(n: int):
    await asyncio.sleep(10)
    for user in games[n][0].active_users():
        await bot.send_message(users_online[user], Messages['5 minutes left'])
    for user in games[n][1]:
        await bot.send_message(user, Messages['5 minutes left'])
    await asyncio.sleep(10)
    for user in games[n][0].active_users():
        await bot.send_message(users_online[user], Messages['1 minute left'])
    for user in games[n][1]:
        await bot.send_message(user, Messages['1 minute left'])
    await asyncio.sleep(10)
    games[n][0].end_this_round()
    round = games[n][0].show_round()
    for user in games[n][0].active_users():
        await bot.send_message(users_online[user], Messages['end_of_round'].format(round), 'MarkdownV2')
    if round == 1:
        css_generator(n, games[n][0].number_of_planets())
    html_page_generator(n, games[n][0])
    os.chdir("round results")
    with ZipFile(f'{n + 1} game {round} round results.zip', 'w') as zfile:
        zfile.write(f'style{n}.css')
        zfile.write(f'results_{n}{round}.html')
        for file in os.listdir('fonts'):
            zfile.write(f'fonts\\{file}')
    for admin in games[n][1]:
        await bot.send_document(admin, 
                                InputFile(f'{n + 1} game {round} round results.zip'),
                                caption=Messages['round_results'].format(round),
                                reply_markup=conversations_admin_keyboard)
    os.chdir('..')
        

def city_stats_message(planet: Planet) -> str:
    all_info = [planet.name(),
                planet.balance(),
                planet.rate_of_life()]
    cities = planet.cities()
    for city in cities:
        addition = ''
        if city.is_under_shield():
            addition = ' üõ°Ô∏è'
        elif city.development() == 0:
            addition = ' ‚ùå'
        all_info.extend([city.name() + addition, city.development(), city.rate_of_life(planet.game().eco_rate), city.income()])
    return Messages['city_info'].format(*all_info)

def sanctions_message(planet: Planet) -> str:
    sanctions = planet.show_sanc_set()
    if len(sanctions) == 0:
        return Messages['sanctions_info'].format('–ù–∏ –æ–¥–Ω–∞ –∏–∑ –ø–ª–∞–Ω–µ—Ç –Ω–µ –Ω–∞–ª–æ–∂–∏–ª–∞ –Ω–∞ –≤–∞—Å —Å–∞–Ω–∫—Ü–∏–∏')
    else:
        return Messages['sanctions_info'].format(', '.join(sanctions))

def meteorites_message(planet: Planet) -> str:
    if planet.is_invented():
        word = morph.parse('–º–µ—Ç–µ–æ—Ä–∏—Ç')[0]
        word = word.make_agree_with_number(planet.meteorites_count()).word
        return f'*–ú–µ—Ç–µ–æ—Ä–∏—Ç—ã:*\n_–£ –≤–∞—Å {planet.meteorites_count()} {word}_ ‚òÑÔ∏è'
    else:
        return '*–ú–µ—Ç–µ–æ—Ä–∏—Ç—ã:*\n_–£ –≤–∞—Å –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç–µ–æ—Ä–∏—Ç–æ–≤_'

def eco_message(game: Game) -> str:
    return Messages['eco_info'].format(game.eco_rate)

def other_planets_message(planet: Planet) -> str:
    args = [planet.name()]
    for city in planet.cities():
        args.extend([city.name() + ' ‚ùå' if city.development() == 0 else '', city.development()])
    return Messages['other_planet'].format(args)
        

def gameid_by_login(login: str) -> int:
    for i in range(len(games)):
        ans = games[i][0].get_homeland(login)
        if ans is not None:
            return i

async def method_executor(method, id : int, *args):
    try:
        method(*args)
    except ArithmeticError:
        await bot.answer_callback_query(id, Messages['no_enough_money'], True)
        return False
    return True
        
    
############################################### –ö–æ–º–∞–Ω–¥—ã –≤–Ω–µ –∏–≥—Ä—ã #######################################################

@dp.message_handler(commands=['start'])
async def start(message : types.Message):
    await message.answer(Messages['start'])

@dp.message_handler(commands=['login'])
async def intializer(message: types.Message):
    login = message.get_args()
    if message.from_id in users_online.values():
        if message.from_id in admin_ids:
            await message.answer(Messages['already_logged'], reply_markup=start_admin_keyboard)
        else:
            await message.answer(Messages['already_logged'])
    elif login not in admins and login not in common_users.keys():
        await message.answer(Messages['login_failure'])
    elif login in users_online.keys():
        await message.answer(Messages['login_online'])
    elif login in common_users.keys():
        users_online[login] = message.from_id
        gameid = gameid_by_login(login)
        game = games[gameid][0]
        planet = game.get_homeland(login)
        active_players = game.active_users()
        game.join_user(login)
        for user in active_players:
            await bot.send_message(chat_id=users_online[user], text=Messages['on_user_joined'].format(planet.name(), game.users_online(), game.number_of_planets()))
        for user in games[gameid][1]:
            await bot.send_message(chat_id=user, text=Messages['on_user_joined'].format(planet.name(), game.users_online(), game.number_of_planets()))
        await message.answer(Messages['login'].format(login))
    else:
        users_online[login] = message.from_id
        admin_ids.add(message.from_id)
        await message.answer(text=Messages['login'].format(login), reply_markup=start_admin_keyboard)

@dp.message_handler(commands=['signout'])
async def signout(message : types.Message):
    id = message.from_id
    login_ = None
    for login, uid in users_online.items():
        if uid == id:
            login_ = login
            users_online.pop(login)
            break
    if id in admin_ids:
        admin_ids.remove(id)
        for gid in range(len(games)):
            if id in games[gid][1]:
                games[gid][1].remove(id)
    else:
        gameid = gameid_by_login(login_)
        game = games[gameid][0]
        planet = game.get_homeland(login_)
        game.kick_user(login_)
        active_players = game.active_users()
        for user in active_players:
            await bot.send_message(chat_id=users_online[user], text=Messages['on_user_left'].format(planet.name(), game.users_online(), game.number_of_planets()))
        for user in games[gameid][1]:
            await bot.send_message(chat_id=user, text=Messages['on_user_left'].format(planet.name(), game.users_online(), game.number_of_planets()))
    await message.answer(Messages['signout'])

@dp.message_handler(commands=['rules'])
async def rules(message : types.Message):
    with open('rules.txt', 'r', encoding='UTF-8') as file:
        text = ''.join(file.readlines())
        await message.answer(text=text, parse_mode='MarkdownV2')

############################################# –ö–Ω–æ–ø–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ –∏–≥—Ä—ã #################################################

@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É' and message.from_id in admin_ids)
async def create_game(message : types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–µ—Ç –≤ –∏–≥—Ä–µ', reply_markup=number_of_planets_keyboard)
    await BotStates.planets_numbers.set()
    
@dp.message_handler(lambda message: message.text == '–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É' and message.from_id in admin_ids)
async def enter_game(message : types.Message):
    markup = InlineKeyboardMarkup(row_width=len(games))
    markup.add(*[InlineKeyboardButton(text=str(i), callback_data=str(i)) for i in range(1, len(games) + 1)])
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', reply_markup=markup)
    await BotStates.entering_game.set()

@dp.message_handler(lambda message: message.text == '–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã' and message.from_id in admin_ids)
async def leave_game(message: types.Message):
    for i in range(len(games)):
        if message.from_id in games[i][1]:
            games[i][1].remove(message.from_id)
            await message.answer(f'–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã {i + 1}.', reply_markup=start_admin_keyboard)
            break

@dp.message_handler(lambda message: message.text == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' and message.from_id in admin_ids)
async def start_game(message : types.Message):
    game_id = None
    for i in range(len(games)):
        if message.from_id in games[i][1]:
            game_id = i
            break
    else:
        await message.answer(Messages['starting_game_not_being_in'], reply_markup=start_admin_keyboard)
        return
    game = games[game_id][0]
    
    if game.users_online() < game.number_of_planets():
        await message.answer(Messages['not_enough_players'].format(game.users_online(), game.number_of_planets()), reply_markup=ingame_admin_keyboard)
    else:
        game.start_new_round()
        games[game_id].append(dict())
        for user in game.all_users():
            planet = game.get_homeland(user)
            await bot.send_message(users_online[user], Messages['first_round'], parse_mode='MarkdownV2')
            games[game_id][2][planet] = dict()
            games[game_id][2][planet]['city_info'] = await bot.send_message(users_online[user], city_stats_message(planet), reply_markup=start_city_keyboard(planet.cities(), []), parse_mode='MarkdownV2')
            games[game_id][2][planet]['meteorites_info'] = await bot.send_message(users_online[user], meteorites_message(planet), reply_markup=invent_meteorites_keyboard(False), parse_mode='MarkdownV2')
        await timer(game_id)
    
@dp.callback_query_handler(state=BotStates.planets_numbers)
async def set_number_of_planets(call: types.CallbackQuery, state: FSMContext):
    global available_logins
    number = int(call.data)
    game_logins = available_logins[-number:]
    available_logins = available_logins[:-number]
    games.append([Game(number, game_logins), []])
    planets = games[-1][0].info()
    message_text = f'–ò–≥—Ä–∞ {len(games)} –Ω–∞ {number} —á–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\\!\n–í–æ—Ç –ª–æ–≥–∏–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞:\n'
    for planet in planets.keys():
        if planet != 'eco_rate':
            login = games[-1][0].info(planet)['login']
            common_users[login] = (len(games) - 1, planet)
            message_text += f'{login} \\- _{planet}_\n'
    await call.message.answer(text=message_text, parse_mode='MarkdownV2')
    await state.finish()

@dp.callback_query_handler(state= BotStates.entering_game)
async def choose_lobby(call: types.CallbackQuery, state: FSMContext):
    number = int(call.data)
    games[number - 1][1].append(call.from_user.id)
    await call.message.answer(Messages['entering_game_admin'].format(number), reply_markup=ingame_admin_keyboard)
    await state.finish()


################################################# –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ###################################################

@dp.callback_query_handler()
async def ingame_action(call: types.CallbackQuery):
    print('–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏')
    message = call.message
    id = call.from_user.id
    login = None
    for ulog, uid in users_online.items():
        if id == uid:
            login = ulog
            break
    print('–ò–∑–≤–ª–µ–∫–ª–∏ –ª–æ–≥–∏–Ω')
    gid = gameid_by_login(login)
    planet = games[gid][0].get_homeland(login)
    type_message = None
    for tp, msg in games[gid][2][planet].items():
        if msg == message:
            type_message = tp
            break
    print('–ò–∑–≤–ª–µ–∫–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è')
    if type_message == 'city_info':
        print('–≠—Ç–æ city_info')
        command, city_name = call.data.split()
        city = None
        for c in planet.cities():
            if c.name() == city_name:
                city = c
                break
        print('–ù–∞—à–ª–∏ –≥–æ—Ä–æ–¥')
        if command == 'develop':
            print('–≠—Ç–æ develop')
            res = await method_executor(planet.develop_city, call.id, city)
            if not res: return
        else:
            print('–≠—Ç–æ defend')
            res = await method_executor(planet.build_shield, call.id, city)
            if not res: return
    elif type_message == 'meteorites_info':
        print('–≠—Ç–æ meteorites_info')
        if call.data == 'invent':
            print('–≠—Ç–æ invent')
            res = await method_executor(planet.invent, call.id)
            if not res: return
            games[gid][2][planet]['meteorites_info'] = await bot.edit_message_reply_markup(message.chat.id, message.message_id, reply_markup=invent_meteorites_keyboard(planet.order()['invent']))
        else:
            n = int(call.data[-1])
            res = await method_executor(planet.create_meteorites, call.id, n)
            if not res: return
            games[gid][2][planet]['meteorites_info'] = await message.edit_text(meteorites_message(planet), 'MarkdownV2', reply_markup=meteorites_keyboard(n))
    print('–ö–æ–Ω–µ—á–Ω–∞—è —Ö—É–π–Ω—è')
    cities = [c for c in planet.cities() if c.development() != 0]
    developed = planet.order().get('develop', [])
    us = planet.order().get('build_shield', [])
    new_msg = city_stats_message(planet)
    if new_msg == games[gid][2][planet]['city_info'].text:
        if games[gid][0].show_round() == 1:
            games[gid][2][planet]['city_info'] = await games[gid][2][planet]['city_info'].edit_message_reply_markup(message.chat.id, games[gid][2][planet]['city_info'].id, reply_markup=start_city_keyboard(cities, developed))
        else:
            games[gid][2][planet]['city_info'] = await games[gid][2][planet]['city_info'].edit_message_reply_markup(message.chat.id, games[gid][2][planet]['city_info'].id, reply_markup=city_keyboard(cities, us, developed))
    else:
        if games[gid][0].show_round() == 1:
            games[gid][2][planet]['city_info'] = await games[gid][2][planet]['city_info'].edit_text(new_msg, parse_mode='MarkdownV2', reply_markup=start_city_keyboard(cities, developed))
        else:
            games[gid][2][planet]['city_info'] = await games[gid][2][planet]['city_info'].edit_text(new_msg, parse_mode='MarkdownV2', reply_markup=city_keyboard(cities, us, developed))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)