version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: wd_db
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_database.sql:/docker-entrypoint-initdb.d/init_database.sql
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    command:
      - "postgres"
      - "c"
      - "port=${DATABASE_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "${DATABASE_USER}", "-d", "${DATABASE_NAME}", ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  test-db:
    image: postgres:latest
    container_name: test_db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: test_db
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: postgres
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres", "-d", "postgres",]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: wd_app
    restart: always
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    command: ["python", "main.py"]
  
  test:
    build:
      dockerfile: test/Dockerfile
      context: .
    depends_on:
      test-db:
        condition: service_healthy
    container_name: test_app
    env_file:
      - .env
    volumes:
      - .:/test

volumes:
  postgres_data:
    driver: local
  test_postgres_data:
    driver: local